# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.27.0
# source: query.sql
from typing import AsyncIterator, Optional
import uuid

import sqlalchemy
import sqlalchemy.ext.asyncio

from game.db import models


ADD_GAME_PLAYER = """-- name: add_game_player \\:exec
INSERT INTO player_game (player_id, game_id) VALUES (
  :p1, :p2
)
"""


CREATE_GAME = """-- name: create_game \\:one
INSERT INTO game DEFAULT values
            RETURNING id, winner_id
"""


CREATE_PLAYER = """-- name: create_player \\:exec
INSERT INTO player (id) values (:p1)
"""


GET_USER = """-- name: get_user \\:one
SELECT id, rating FROM player
 WHERE id = :p1 LIMIT 1
"""


GET_USER_GAMES = """-- name: get_user_games \\:many
SELECT g.id, g.winner_id FROM game g
                JOIN player_game ug ON g.id = ug.game_id
 WHERE ug.player_id = :p1
"""


GET_USER_WINS = """-- name: get_user_wins \\:many
SELECT id, winner_id FROM game
 WHERE game.winner_id = :p1
"""


UPDATE_GAME_WINNER = """-- name: update_game_winner \\:exec
UPDATE game
   SET winner_id = :p2
 WHERE id = :p1
"""


UPDATE_PLAYER_RATING = """-- name: update_player_rating \\:exec
UPDATE player
   SET rating = :p2
 WHERE id = :p1
"""


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def add_game_player(self, *, player_id: int, game_id: uuid.UUID) -> None:
        await self._conn.execute(sqlalchemy.text(ADD_GAME_PLAYER), {"p1": player_id, "p2": game_id})

    async def create_game(self) -> Optional[models.Game]:
        row = (await self._conn.execute(sqlalchemy.text(CREATE_GAME))).first()
        if row is None:
            return None
        return models.Game(
            id=row[0],
            winner_id=row[1],
        )

    async def create_player(self, *, id: int) -> None:
        await self._conn.execute(sqlalchemy.text(CREATE_PLAYER), {"p1": id})

    async def get_user(self, *, id: int) -> Optional[models.Player]:
        row = (await self._conn.execute(sqlalchemy.text(GET_USER), {"p1": id})).first()
        if row is None:
            return None
        return models.Player(
            id=row[0],
            rating=row[1],
        )

    async def get_user_games(self, *, player_id: int) -> AsyncIterator[models.Game]:
        result = await self._conn.stream(sqlalchemy.text(GET_USER_GAMES), {"p1": player_id})
        async for row in result:
            yield models.Game(
                id=row[0],
                winner_id=row[1],
            )

    async def get_user_wins(self, *, winner_id: Optional[int]) -> AsyncIterator[models.Game]:
        result = await self._conn.stream(sqlalchemy.text(GET_USER_WINS), {"p1": winner_id})
        async for row in result:
            yield models.Game(
                id=row[0],
                winner_id=row[1],
            )

    async def update_game_winner(self, *, id: uuid.UUID, winner_id: Optional[int]) -> None:
        await self._conn.execute(sqlalchemy.text(UPDATE_GAME_WINNER), {"p1": id, "p2": winner_id})

    async def update_player_rating(self, *, id: int, rating: Optional[int]) -> None:
        await self._conn.execute(sqlalchemy.text(UPDATE_PLAYER_RATING), {"p1": id, "p2": rating})
